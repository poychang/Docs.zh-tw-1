### YamlMime:Tutorial
title: "分支和迴圈"
metadata:
  title: "分支和迴圈"
  description: "在本快速入門中，您將使用瀏覽器以互動方式學習有關 C# 的分支和迴圈。 您將會撰寫 C# 程式碼，並直接在瀏覽器中查看編譯和執行程式碼的結果。"
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.topic: get-started-article
  displayType: two-column
  interactive: csharp
  nextTutorialHref: interpolated-strings
  nextTutorialTitle: "C# 中的插入字串"
  ms.openlocfilehash: 04fe3ae50791d3484f5f846a753aa55c6de1b01f
  ms.sourcegitcommit: 8bde7a3432f30fc771079744955c75c58c4eb393
  ms.translationtype: HT
  ms.contentlocale: zh-TW
  ms.lasthandoff: 01/20/2018
items:
- durationInMinutes: 1
  content: "本快速入門將讓您了解如何撰寫程式碼來檢視變數，並根據這些變數來變更執行路徑。 您將以互動方式使用瀏覽器撰寫 C#，並查看編譯和執行程式碼的結果。 本快速入門包含一系列探索 C# 中分支和迴圈建構的課程。 這些課程會教導您 C# 語言的基本概念。\n"
- title: "使用 if 陳述式來做決策"
  durationInMinutes: 4
  content: "在互動式視窗中執行下列程式碼。 若要這樣做，請在互動式視窗中輸入下列程式碼區塊，並按一下 [執行] 按鈕：\n\n```csharp\nint a = 5;\nint b = 6;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10.\");\n```\n\n修改 `b` 的宣告，讓總和小於 10： \n\n```csharp\nint b = 3;\n```\n\n再按一下 [執行] 按鈕。 因為答案小於 10，所以不會印出任何東西。 您正在測試的**條件**為 False。 您尚未有可執行的程式碼，因為您在 `if` 陳述式中僅撰寫了一個可能的分支：True 分支。\n\n> [!TIP]\n> 在您探索 C# (或任何程式設計語言) 時，可能會在撰寫程式碼時犯錯。 **編譯器**會找出那些錯誤並回報給您。 當輸出包含錯誤訊息時，請仔細查看範例程式碼以及互動式視窗中的程式碼，看看有哪些可以修正。\n> 該練習將有助於您了解 C# 程式碼的結構。     \n\n此第一個範例示範 `if` 和布林型別的功能。 「布林」是一個變數，可能具有兩種值的其中之一：`true` 或 `false`。 C# 為布林變數定義了一個特殊型別：`bool`。 `if` 陳述式會檢查 `bool` 的值。 當值為 `true` 時，就會執行 `if` 之後的陳述式。 否則，就會略過。 \n\n這個流程可以檢查條件，並根據條件來執行陳述式，因此非常實用。 讓我們來探索更多內容。\n\n> [!NOTE]\n> 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。\n"
- title: "搭配使用 if 和 else"
  durationInMinutes: 10
  content: "\n若要在 True 和 False 分支中執行不同的程式碼，則必須建立可在條件為 False 時執行的 `else` 分支。 試試這個：\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n只有當測試的條件為 `false` 時，才會執行 `else` 關鍵字之後的陳述式。 將 `if` 和 `else` 結合布林值條件，就可提供您需要的所有功能。\n\n> [!IMPORTANT]\n> `if` 和 `else` 陳述式之下的縮排是為了方便人類閱讀。\n> C# 語言不會將縮排或空格視為有意義的內容。 `if` 或 `else` 關鍵字之後的陳述式將會根據條件來執行。 在本快速入門中的所有範例，都會遵循常見的做法，根據陳述式的控制流程將程式碼行加以縮排。\n\n因為縮排沒有意義，當您要依條件執行的區塊中有超過一個陳述式時，就需要使用 `{` 和 `}` 來表示。 C# 程式設計人員通常會在所有的 `if` 和 `else` 子句上使用這些大括號。 下列範例與您剛剛所建立的內容相同。 試試看。\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> 本快速入門的其餘部分，程式碼範例都會遵循常見的做法，在程式碼中包含大括號。\n\n您可以測試更複雜的條件：\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\n`&&` 代表「且」。 這表示兩個條件都必須為 True，才會執行 True 分支中的陳述式。  這些範例也示範在每個條件式分支中可以有多個陳述式，前提是必須將陳述式放在 `{` 和 `}` 之中。\n\n您也可以使用 `||` 來代表「或」：\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\n> [!NOTE]\n> 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。\n"
- title: "使用迴圈重複執行作業"
  durationInMinutes: 6
  content: "若要建立較大型的程式，另一項重要的概念是**迴圈**。 您將使用迴圈來重複要執行一次以上的陳述式。 在互動式視窗中嘗試這個程式碼：\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n}\n```\n\n`while` 陳述式會檢查條件，並執行 `while` 之後的陳述式。 它會重複檢查條件並執行那些陳述式，直到條件為 False 為止。\n\n在此範例中有一個新的運算子。 `counter` 變數之後的 `++` 是**遞增**運算子。 它會將 1 加到 counter (計數器) 上，並將該值儲存在 counter 變數中。\n\n> [!IMPORTANT]\n> 請確定 `while` 迴圈條件在您執行程式碼時會切換至 False。 否則，您建立的**無限迴圈**程式永遠不會結束。 我們不會示範這個部分，因為執行程式碼的引擎將會逾時，而您不會看到程式有任何輸出。\n\n`while` 迴圈會先測試條件，然後才執行 `while` 之後的程式碼。 `do` ... `while` 迴圈會先執行程式碼，然後才檢查條件。 程式碼看起來像這樣：\n\n```csharp\nint counter = 0;\ndo\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n} while (counter < 10);\n```\n\n此 `do` 迴圈和稍早的 `while` 迴圈有相同的功能。 \n\n讓我們繼續至最後一個迴圈陳述式。\n\n> [!NOTE]\n> 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。\n"
- title: "使用 for 迴圈"
  durationInMinutes: 5
  content: "您在 C# 程式碼中常看到的另一個迴圈陳述式是 `for` 迴圈。 在互動式視窗中嘗試這個程式碼：\n\n```csharp\nfor(int counter = 0; counter < 10; counter++)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n} \n```\n\n這與先前使用的 `while` 迴圈和 `do` 迴圈有相同的功能。 `for` 陳述式有三個部分來控制其運作方式。 \n\n第一個部分是 **for 初始設定式**：`for counter = 0;` 宣告 `counter` 是迴圈變數，然後將它的初始值設為 `0`。\n\n中間的部分是 **for 條件**：`counter < 10` 宣告此 `for` 迴圈只要 counter (計數器) 的值小於 10，就會繼續執行。\n\n最後一個部分是 **for 迭代器**：`counter++` 會指定在執行 `for` 陳述式之後的區塊後，如何修改迴圈變數。 在這裡，它指定 `counter` 應該在每次執行區塊之後遞增 1。\n\n您可以自行實驗這些部分。 請嘗試下列各項：\n\n- 變更初始設定式，以不同的值開始。\n- 變更條件，以不同的值停止。\n\n當您完成後，我們會繼續使用您學到的內容來撰寫一些程式碼。\n\n> [!NOTE]\n> 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。\n"
- title: "結合分支和迴圈"
  durationInMinutes: 12
  content: "您已經了解 C# 語言中的 `if` 陳述式和迴圈建構，接著看看您是否能夠撰寫 C# 程式碼，以找出從整數 1 至 20 能夠被 3 整除之數字的總和。  下列提供幾個提示：\n\n- `%` 運算子可提供除法運算的餘數。\n- `if` 陳述式可提供條件，以判斷數字是否應為總和的一部分。\n- `for` 迴圈可協助您將 1 到 20 的所有數字重複一系列的步驟。\n\n請自己試試看。 然後檢查成果。 作為提示，您獲得的答案應該是 63。\n\n> [!NOTE]\n> 此線上程式碼撰寫體驗仍處於預覽模式。 如果您遇到問題，請在 [dotnet/try 存放庫](https://github.com/dotnet/try/issues) \\(英文\\) 中回報。\n"
- title: "完成挑戰"
  durationInMinutes: 1
  content: "您已經完成＜分支和迴圈＞快速入門。 \n\n您可以在自己的開發環境中繼續進行這些快速入門。 了解[本機開發](local-environment.md)的基本概念，然後選擇快速入門。 您可以嘗試這個相同的練習、直接移至下一個快速入門，或從 [C# 中的數字](numbers-in-csharp-local.md)快速入門重新開始。\n\n您可以在下列主題中深入了解這些概念：\n\n[If 和 else 陳述式](../language-reference/keywords/if-else.md)   \n[While 陳述式](../language-reference/keywords/while.md)   \n[Do 陳述式](../language-reference/keywords/do.md)   \n[For 陳述式](../language-reference/keywords/for.md)\0"
